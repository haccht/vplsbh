package l2vpn

import (
	"testing"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
)

// testPacket1
// Ethernet II, Src: cc:15:14:64:00:00 (cc:15:14:64:00:00), Dst: cc:13:14:64:00:01 (cc:13:14:64:00:01)
// MultiProtocol Label Switching Header, Label: 17, Exp: 0, S: 0, TTL: 254
// Ethernet II, Src: 00:00:5e:00:53:00 (00:00:5e:00:53:00), Dst: 00:00:5e:00:53:01 (00:00:5e:00:53:01)
// Internet Protocol Version 4, Src: 12.0.0.1, Dst: 2.2.2.2
// Internet Control Message Protocol
var testPacket1 = []byte{
	0xcc, 0x13, 0x14, 0x64, 0x00, 0x01, 0xcc, 0x15, 0x14, 0x64, 0x00, 0x00, 0x88, 0x47, 0x00, 0x01,
	0x31, 0xfe, 0x00, 0x00, 0x5e, 0x00, 0x53, 0x01, 0x00, 0x00, 0x5e, 0x00, 0x53, 0x00, 0x08, 0x00,
	0x45, 0x00, 0x00, 0x64, 0x00, 0x39, 0x00, 0x00, 0xfe, 0x01, 0xac, 0x5b, 0x0c, 0x00, 0x00, 0x01,
	0x02, 0x02, 0x02, 0x02, 0x08, 0x00, 0x3a, 0x6b, 0x00, 0x0b, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x3e, 0x43, 0x94, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
	0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
	0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
	0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
	0xab, 0xcd, 0xab, 0xcd,
}

func TestPacketEoMPLS(t *testing.T) {
	layers.MPLSPayloadDecoder = &PWMCWDecoder{ControlWord: false}
	p := gopacket.NewPacket(testPacket1, layers.LinkTypeEthernet, gopacket.Default)
	if p.ErrorLayer() != nil {
		t.Error("Failed to decode packet:", p.ErrorLayer().Error())
	}
}

// testPacket2
// Ethernet II, Src: cc:15:14:64:00:00 (cc:15:14:64:00:00), Dst: cc:13:14:64:00:01 (cc:13:14:64:00:01)
// MultiProtocol Label Switching Header, Label: 17, Exp: 0, S: 0, TTL: 254
// GeneralPWMCW, 00:00:00:00
// Ethernet II, Src: 00:00:5e:00:53:00 (00:00:5e:00:53:00), Dst: 00:00:5e:00:53:01 (00:00:5e:00:53:01)
// Internet Protocol Version 4, Src: 12.0.0.1, Dst: 2.2.2.2
// Internet Control Message Protocol
var testPacket2 = []byte{
	0xcc, 0x13, 0x14, 0x64, 0x00, 0x01, 0xcc, 0x15, 0x14, 0x64, 0x00, 0x00, 0x88, 0x47, 0x00, 0x01,
	0x31, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x53, 0x01, 0x00, 0x00, 0x5e, 0x00,
	0x53, 0x00, 0x08, 0x00, 0x45, 0x00, 0x00, 0x64, 0x00, 0x39, 0x00, 0x00, 0xfe, 0x01, 0xac, 0x5b,
	0x0c, 0x00, 0x00, 0x01, 0x02, 0x02, 0x02, 0x02, 0x08, 0x00, 0x3a, 0x6b, 0x00, 0x0b, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x43, 0x94, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
	0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
	0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
	0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
	0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd,
}

func TestPacketEoMPLSCW(t *testing.T) {
	layers.MPLSPayloadDecoder = &PWMCWDecoder{ControlWord: true}
	p := gopacket.NewPacket(testPacket2, layers.LinkTypeEthernet, gopacket.Default)
	if p.ErrorLayer() != nil {
		t.Error("Failed to decode packet with CW:", p.ErrorLayer().Error())
	}
}
