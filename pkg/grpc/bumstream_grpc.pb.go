// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: bumstream.proto

package bumpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BumSniffServiceClient is the client API for BumSniffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BumSniffServiceClient interface {
	Sniff(ctx context.Context, in *Request, opts ...grpc.CallOption) (BumSniffService_SniffClient, error)
}

type bumSniffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBumSniffServiceClient(cc grpc.ClientConnInterface) BumSniffServiceClient {
	return &bumSniffServiceClient{cc}
}

func (c *bumSniffServiceClient) Sniff(ctx context.Context, in *Request, opts ...grpc.CallOption) (BumSniffService_SniffClient, error) {
	stream, err := c.cc.NewStream(ctx, &BumSniffService_ServiceDesc.Streams[0], "/protobuf.BumSniffService/Sniff", opts...)
	if err != nil {
		return nil, err
	}
	x := &bumSniffServiceSniffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BumSniffService_SniffClient interface {
	Recv() (*Packet, error)
	grpc.ClientStream
}

type bumSniffServiceSniffClient struct {
	grpc.ClientStream
}

func (x *bumSniffServiceSniffClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BumSniffServiceServer is the server API for BumSniffService service.
// All implementations should embed UnimplementedBumSniffServiceServer
// for forward compatibility
type BumSniffServiceServer interface {
	Sniff(*Request, BumSniffService_SniffServer) error
}

// UnimplementedBumSniffServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBumSniffServiceServer struct {
}

func (UnimplementedBumSniffServiceServer) Sniff(*Request, BumSniffService_SniffServer) error {
	return status.Errorf(codes.Unimplemented, "method Sniff not implemented")
}

// UnsafeBumSniffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BumSniffServiceServer will
// result in compilation errors.
type UnsafeBumSniffServiceServer interface {
	mustEmbedUnimplementedBumSniffServiceServer()
}

func RegisterBumSniffServiceServer(s grpc.ServiceRegistrar, srv BumSniffServiceServer) {
	s.RegisterService(&BumSniffService_ServiceDesc, srv)
}

func _BumSniffService_Sniff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BumSniffServiceServer).Sniff(m, &bumSniffServiceSniffServer{stream})
}

type BumSniffService_SniffServer interface {
	Send(*Packet) error
	grpc.ServerStream
}

type bumSniffServiceSniffServer struct {
	grpc.ServerStream
}

func (x *bumSniffServiceSniffServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

// BumSniffService_ServiceDesc is the grpc.ServiceDesc for BumSniffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BumSniffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.BumSniffService",
	HandlerType: (*BumSniffServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sniff",
			Handler:       _BumSniffService_Sniff_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bumstream.proto",
}
